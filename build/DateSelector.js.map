{"version":3,"file":"DateSelector.js","sources":["../src/Input/DateSelector.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport InputMask from 'react-input-mask';\nimport PropTypes from 'prop-types';\nimport Styles from './Input.module.scss';\nimport classNames from 'classnames';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\nimport 'react-datetime/css/react-datetime.css'; // for ES6 modules\nimport MaskedInput from 'react-text-mask';\n\nconst DateSelector = ({\n  onChange,\n  placeholder,\n  label,\n  showTime,\n  onInvalidDate,\n  isValidDate,\n  disabled,\n  ...props\n}) => {\n  const [value, setValue] = useState(moment(props.value));\n  const [error, setError] = useState(props.error);\n  const [active, setActive] = useState(props.active);\n\n  const handleChange = (momentDate) => {\n    if (!momentDate) {\n      setValue(null);\n      try {\n        onChange(null);\n      } catch (err) {\n        return;\n      }\n    } else if (\n      momentDate instanceof moment === false ||\n      (onInvalidDate && isValidDate && !isValidDate(momentDate))\n    ) {\n      console.log('not valid');\n      try {\n        onInvalidDate(momentDate);\n      } catch (err) {\n        return;\n      }\n      return;\n    }\n    // Set value, deserialize and send back\n    const value = momentDate;\n    setValue(value);\n    try {\n      onChange(value);\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n  };\n\n  const fieldClassName = classNames(\n    Styles.container,\n    placeholder && Styles.active,\n    ((disabled ? active : active || value) || error || disabled) &&\n      Styles.active,\n    disabled && !active && Styles.locked\n  );\n\n  const renderInput = (props, openCalendar, closeCalendar) => {\n    return (\n      <React.Fragment>\n        <MaskedInput\n          mask={[/[0-9]/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]}\n          keepCharPositions\n          {...props}\n        />\n        <label\n          htmlFor={name}\n          className={classNames(Styles.label, props.error && Styles.error)}\n        >\n          {props.error || label}\n        </label>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className={fieldClassName}>\n      <Datetime\n        dateFormat='DD/MM/YYYY'\n        inputProps={{\n          className: classNames(Styles.base, Styles.inputActive),\n          placeholder: placeholder || label,\n          label: label,\n          error: props.error\n        }}\n        closeOnSelect={true}\n        strictParsing\n        value={value}\n        onChange={handleChange}\n        timeFormat={showTime}\n        isValidDate={isValidDate}\n        renderInput={renderInput}\n      />\n    </div>\n  );\n};\n\nDateSelector.propTypes = {\n  name: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  active: PropTypes.bool,\n  placeholder: PropTypes.string,\n  error: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n    PropTypes.func\n  ]),\n  required: PropTypes.bool,\n  showTime: PropTypes.bool,\n  value: PropTypes.string,\n  step: PropTypes.string,\n  type: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onInvalidDate: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  min: PropTypes.number,\n  isValidDate: PropTypes.func,\n  viewMode: PropTypes.string,\n  dateFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  isMasked: PropTypes.bool\n};\n\nDateSelector.defaultProps = {\n  type: 'text',\n  step: null,\n  max: null,\n  showTime: false,\n  viewMode: 'days',\n  dateFormat: 'DD/MM/YYYY',\n  isMasked: true\n};\n\nexport default DateSelector;\n"],"names":["DateSelector","onChange","placeholder","label","showTime","onInvalidDate","isValidDate","disabled","props","useState","moment","value","setValue","error","active","fieldClassName","classNames","Styles","container","locked","React","className","Datetime","dateFormat","inputProps","base","inputActive","closeOnSelect","strictParsing","momentDate","console","log","err","timeFormat","renderInput","openCalendar","closeCalendar","Fragment","MaskedInput","mask","keepCharPositions","htmlFor","name","propTypes","PropTypes","string","isRequired","bool","oneOfType","func","required","step","type","onKeyPress","onBlur","onFocus","min","number","viewMode","isMasked","defaultProps","max"],"mappings":"iuBAUMA,EAAe,gBACnBC,IAAAA,SACAC,IAAAA,YACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,cACAC,IAAAA,YACAC,IAAAA,SACGC,oCAEuBC,WAASC,UAAOF,EAAMG,gCAAzCA,OAAOC,SACYH,WAASD,EAAMK,+BAAlCA,kBACqBJ,WAASD,EAAMM,gCAApCA,gBAiCDC,EAAiBC,UACrBC,cAAOC,UACPhB,GAAee,cAAOH,SACpBP,EAAWO,EAASA,GAAUH,IAAUE,GAASN,IACjDU,cAAOH,OACTP,IAAaO,GAAUG,cAAOE,eAsB9BC,+BAAKC,UAAWN,GACdK,wBAACE,WACCC,WAAW,aACXC,WAAY,CACVH,UAAWL,UAAWC,cAAOQ,KAAMR,cAAOS,aAC1CxB,YAAaA,GAAeC,EAC5BA,MAAOA,EACPU,MAAOL,EAAMK,OAEfc,eAAe,EACfC,iBACAjB,MAAOA,EACPV,SAtEe,SAAC4B,MACfA,GAOE,GACLA,aAAsBnB,YAAW,GAChCL,GAAiBC,IAAgBA,EAAYuB,GAC9C,CACAC,QAAQC,IAAI,iBAEV1B,EAAcwB,GACd,MAAOG,sBAdM,CACfpB,EAAS,UAEPX,EAAS,MACT,MAAO+B,eAgBLrB,EAAQkB,EACdjB,EAASD,OAEPV,EAASU,GACT,MAAOqB,eACPF,QAAQjB,MAAMmB,KA6CZC,WAAY7B,EACZE,YAAaA,EACb4B,YAlCc,SAAC1B,EAAO2B,EAAcC,UAEtChB,wBAACA,UAAMiB,cACLjB,wBAACkB,sBACCC,KAAM,CAAC,QAAS,KAAM,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,MAC9DC,sBACIhC,IAENY,iCACEqB,QAASC,KACTrB,UAAWL,UAAWC,cAAOd,MAAOK,EAAMK,OAASI,cAAOJ,QAEzDL,EAAMK,OAASV,SA4B1BH,EAAa2C,UAAY,CACvBD,KAAME,UAAUC,OAAOC,WACvBvC,SAAUqC,UAAUG,KACpBjC,OAAQ8B,UAAUG,KAClB7C,YAAa0C,UAAUC,OACvBhC,MAAO+B,UAAUI,UAAU,CACzBJ,UAAUC,OACVD,UAAUG,KACVH,UAAUK,OAEZC,SAAUN,UAAUG,KACpB3C,SAAUwC,UAAUG,KACpBpC,MAAOiC,UAAUC,OACjBM,KAAMP,UAAUC,OAChBO,KAAMR,UAAUC,OAChB1C,MAAOyC,UAAUC,OACjB5C,SAAU2C,UAAUK,KACpB5C,cAAeuC,UAAUK,KACzBI,WAAYT,UAAUK,KACtBK,OAAQV,UAAUK,KAClBM,QAASX,UAAUK,KACnBO,IAAKZ,UAAUa,OACfnD,YAAasC,UAAUK,KACvBS,SAAUd,UAAUC,OACpBtB,WAAYqB,UAAUI,UAAU,CAACJ,UAAUC,OAAQD,UAAUG,OAC7DY,SAAUf,UAAUG,MAGtB/C,EAAa4D,aAAe,CAC1BR,KAAM,OACND,KAAM,KACNU,IAAK,KACLzD,UAAU,EACVsD,SAAU,OACVnC,WAAY,aACZoC,UAAU"}