{"version":3,"file":"Button.js","sources":["../src/Button/Button.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Loader from '../Loader/Loader.jsx';\nimport Styles from './Button.module.scss';\nimport classNames from 'classnames';\n\nconst Type = {\n  WHITE: Styles.white,\n  WHITE_BLUE_OUTLINE: Styles.whiteBlueOutline,\n  BLUE_OUTLINE: Styles.blueOutline,\n  RED_OUTLINE: Styles.redOutline,\n  LIGHT_GRAY: Styles.lightGray,\n  BLUE: Styles.blue,\n  DARKBLUE: Styles.darkblue,\n  GRAY: Styles.gray\n};\n\nconst lightTypes = [\n  Type.WHITE,\n  Type.WHITE_BLUE_OUTLINE,\n  Type.BLUE_OUTLINE,\n  Type.RED_OUTLINE,\n  Type.LIGHT_GRAY\n];\n\nconst Button = React.memo(\n  ({\n    type,\n    size,\n    className,\n    children,\n    content,\n    disabled,\n    isLoading,\n    element: Elem,\n    ...props\n  }) => {\n    const isLight = lightTypes.filter((l) => l === type);\n    return (\n      <Elem\n        type='button'\n        className={classNames(Styles.btn, className, type, size)}\n        disabled={disabled}\n        {...props}\n      >\n        {isLoading && (\n          <Loader\n            style={{ marginRight: '10px' }}\n            color={isLight?.length ? Loader.Color.BLUE : Loader.Color.WHITE}\n            size={Loader.Size.SMALL}\n          />\n        )}\n        {content || children}\n      </Elem>\n    );\n  }\n);\n\nButton.Type = Type;\n\nButton.Size = {\n  FULLWIDTH: Styles.fullwidth,\n  FULLWIDTH_LARGE: Styles.fullwidthLarge,\n  LARGE: Styles.large\n};\n\nButton.Styles = Styles;\n\nButton.defaultProps = {\n  element: 'button'\n};\n\nButton.propTypes = {\n  type: PropTypes.string,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  content: PropTypes.string,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  asLink: PropTypes.bool\n};\n\nexport default Button;\n"],"names":["Type","WHITE","Styles","white","WHITE_BLUE_OUTLINE","whiteBlueOutline","BLUE_OUTLINE","blueOutline","RED_OUTLINE","redOutline","LIGHT_GRAY","lightGray","BLUE","blue","DARKBLUE","darkblue","GRAY","gray","lightTypes","Button","React","memo","type","size","className","children","content","disabled","isLoading","Elem","element","props","isLight","filter","l","classNames","btn","Loader","style","marginRight","color","length","Color","Size","SMALL","FULLWIDTH","fullwidth","FULLWIDTH_LARGE","fullwidthLarge","LARGE","large","defaultProps","propTypes","PropTypes","string","node","bool","asLink"],"mappings":"4kOAMMA,EAAO,CACXC,MAAOC,EAAOC,MACdC,mBAAoBF,EAAOG,iBAC3BC,aAAcJ,EAAOK,YACrBC,YAAaN,EAAOO,WACpBC,WAAYR,EAAOS,UACnBC,KAAMV,EAAOW,KACbC,SAAUZ,EAAOa,SACjBC,KAAMd,EAAOe,MAGTC,EAAa,CACjBlB,EAAKC,MACLD,EAAKI,mBACLJ,EAAKM,aACLN,EAAKQ,YACLR,EAAKU,YAGDS,EAASC,QAAMC,MACnB,gBACEC,IAAAA,KACAC,IAAAA,KACAC,IAAAA,UACAC,IAAAA,SACAC,IAAAA,QACAC,IAAAA,SACAC,IAAAA,UACSC,IAATC,QACGC,kCAEGC,EAAUd,EAAWe,QAAO,SAACC,UAAMA,IAAMZ,YAE7CF,sBAACS,cACCP,KAAK,SACLE,UAAWW,aAAWjC,EAAOkC,IAAKZ,EAAWF,EAAMC,GACnDI,SAAUA,GACNI,GAEHH,GACCR,sBAACiB,GACCC,MAAO,CAAEC,YAAa,QACtBC,MAAOR,MAAAA,GAAAA,EAASS,OAASJ,EAAOK,MAAM9B,KAAOyB,EAAOK,MAAMzC,MAC1DsB,KAAMc,EAAOM,KAAKC,QAGrBlB,GAAWD,MAMpBN,EAAOnB,KAAOA,EAEdmB,EAAOwB,KAAO,CACZE,UAAW3C,EAAO4C,UAClBC,gBAAiB7C,EAAO8C,eACxBC,MAAO/C,EAAOgD,OAGhB/B,EAAOjB,OAASA,EAEhBiB,EAAOgC,aAAe,CACpBrB,QAAS,UAGXX,EAAOiC,UAAY,CACjB9B,KAAM+B,YAAUC,OAChB/B,KAAM8B,YAAUC,OAChB7B,SAAU4B,YAAUE,KACpB7B,QAAS2B,YAAUC,OACnB9B,UAAW6B,YAAUC,OACrB3B,SAAU0B,YAAUG,KACpB5B,UAAWyB,YAAUG,KACrBC,OAAQJ,YAAUG"}