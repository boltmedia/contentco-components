{"version":3,"file":"DateInput.js","sources":["../src/Input/DateInput.jsx"],"sourcesContent":["import React from 'react';\nimport InputMask from 'react-input-mask';\nimport PropTypes from 'prop-types';\nimport Styles from './Input.module.scss';\nimport classNames from 'classnames';\nimport Datetime from 'react-datetime';\nimport moment from 'moment';\nimport 'react-datetime/css/react-datetime.css'; // for ES6 modules\nimport MaskedInput from 'react-text-mask';\n\nclass DateInput extends React.Component {\n  constructor(props) {\n    super(props);\n    // serialize\n    this.state = {\n      // active: (props.locked && props.active) || false,\n      active: props.active || false,\n      month: props.month || '',\n      year: props.year || '',\n      value: this.serialize(props.month, props.year),\n      error: props.error || '',\n      validError: null,\n      required: props.required || false,\n      label: props.label || 'Label',\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.error !== state.error) {\n      state.error = props.error || '';\n    }\n    // if (props.value !== state.value) {\n    //   state.value = props.value || '';\n    // }\n    return state;\n  }\n\n  serialize = (month, year) => {\n    // from month/yr to js date (not moment..)\n    if (!month) return null;\n    if (!year) return null;\n    // From any inputs\n    // return new Date(year, month + 1, 0, 0, 0, 0, 0);\n    // Month stored is actual month # (1-12)\n    return moment()\n      .year(year)\n      .month(month - 1);\n  };\n\n  deserialize = (date) => {\n    if (!date) return { month: null, year: null };\n    // from moment date to month/yr\n    const month = date.month() + 1;\n    // Month computed is 0-11\n    const year = date.year();\n    return { month, year };\n  };\n\n  handleChange = (momentDate) => {\n    if (!momentDate) {\n      this.setState({ value: null, month: null, year: null }, () => {\n        try {\n          this.props.onChange(null, { month: null, year: null });\n        } catch (err) {\n          console.error(err);\n          return;\n        }\n      });\n    } else if (momentDate instanceof moment === false) {\n      console.log('not valid');\n      return;\n    }\n    // Set value, deserialize and send back\n    const value = momentDate;\n    const { month, year } = this.deserialize(value);\n    this.setState({ value, month, year }, () => {\n      try {\n        this.props.onChange(value, { month, year });\n      } catch (err) {\n        console.error(err);\n        return;\n      }\n    });\n  };\n\n  handleKeyPress = (event) => {\n    this.setState({ error: '', validError: null });\n    try {\n      this.props.onKeyPress(event);\n    } catch (err) {\n      return;\n    }\n  };\n\n  handleFocus = (event) => {\n    if (this.props.locked) {\n      this.stateState({ active: true });\n    }\n\n    try {\n      this.props.onFocus(event);\n    } catch (err) {\n      return;\n    }\n  };\n\n  handleBlur = (event) => {\n    if (this.props.locked) {\n      this.stateState({ active: false });\n    }\n\n    const callback = () => {\n      // Note that I'm using the onchange callback on blur as well\n      try {\n        this.props.onChange(event, {\n          month: this.state.month,\n          year: this.state.year,\n          valid: !this.state.validError,\n        });\n      } catch (err) {\n        return;\n      }\n      return;\n    };\n\n    // Doing this validation here just because I think this is the only case we use this component\n    if (this.state.required && (isNaN(this.state.month) || isNaN(this.state.year))) {\n      this.setState({ validError: 'Enter a date' }, callback);\n    } else if (this.state.year < 1900 || this.state.year > 2040) {\n      this.setState({ validError: 'Enter a valid year' }, callback);\n    } else if (this.state.month > 12) {\n      this.setState({ validError: 'Enter a valid month' }, callback);\n    } else {\n      this.setState({ validError: null }, callback);\n    }\n  };\n\n  beforeMaskedValueChange = (newState, oldState, userInput) => {\n    const { value } = newState;\n    const selection = newState.selection;\n\n    return {\n      value,\n      selection,\n    };\n  };\n\n  render() {\n    const { active, month, year, label } = this.state;\n    const { locked, name, required } = this.props;\n\n    const fieldClassName = classNames(\n      Styles.container,\n      ((locked ? active : active || month || year) ||\n        this.state.error ||\n        this.state.validError ||\n        locked) &&\n        Styles.active,\n      (this.state.error || this.state.validError) && Styles.containerError,\n      locked && !active && Styles.locked\n    );\n    return (\n      <div className={fieldClassName}>\n        <Datetime\n          dateFormat='MM/YYYY'\n          inputProps={{\n            className: classNames(Styles.base, Styles.input),\n            placeholder: label,\n          }}\n          strictParsing\n          value={this.state.value}\n          onChange={this.handleChange}\n          timeFormat={false}\n          renderInput={(props, openCalendar, closeCalendar) => {\n            return (\n              <React.Fragment>\n                <MaskedInput\n                  mask={[/[0-1]/, /\\d/, '/', /[1-2]/, /\\d/, /\\d/, /\\d/]}\n                  keepCharPositions\n                  {...props}\n                />\n                <label\n                  htmlFor={name}\n                  className={classNames(\n                    Styles.label,\n                    (this.state.error || this.state.validError) && Styles.error\n                  )}>\n                  {this.state.error || this.state.validError || label}\n                </label>\n              </React.Fragment>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nDateInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  locked: PropTypes.bool,\n  active: PropTypes.bool,\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  required: PropTypes.bool,\n  value: PropTypes.string,\n  step: PropTypes.string,\n  type: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  onKeyPress: PropTypes.func,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n};\n\nDateInput.defaultProps = {\n  type: 'text',\n  step: null,\n  max: null,\n};\n\nexport default DateInput;\n"],"names":["DateInput","props","serialize","month","year","moment","deserialize","date","handleChange","momentDate","console","log","setState","value","onChange","err","error","_this","handleKeyPress","event","validError","onKeyPress","handleFocus","locked","stateState","active","onFocus","handleBlur","callback","state","valid","required","isNaN","beforeMaskedValueChange","newState","oldState","userInput","selection","label","this","name","fieldClassName","classNames","Styles","container","containerError","React","className","Datetime","dateFormat","inputProps","base","input","placeholder","strictParsing","timeFormat","renderInput","openCalendar","closeCalendar","Fragment","MaskedInput","mask","keepCharPositions","htmlFor","_this2","Component","propTypes","PropTypes","string","isRequired","bool","oneOfType","func","step","type","onBlur","defaultProps","max"],"mappings":"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"}